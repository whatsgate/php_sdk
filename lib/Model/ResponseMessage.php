<?php
/**
 * ResponseMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API whatsgate.ru
 *
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseMessage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'ack' => 'int',
'has_media' => 'bool',
'media_key' => 'string',
'body' => 'string',
'type' => 'string',
'timestamp' => 'int',
'from' => 'string',
'to' => 'string',
'is_forwarded' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'ack' => null,
'has_media' => null,
'media_key' => null,
'body' => null,
'type' => null,
'timestamp' => null,
'from' => null,
'to' => null,
'is_forwarded' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'ack' => 'ack',
'has_media' => 'hasMedia',
'media_key' => 'mediaKey',
'body' => 'body',
'type' => 'type',
'timestamp' => 'timestamp',
'from' => 'from',
'to' => 'to',
'is_forwarded' => 'isForwarded'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'ack' => 'setAck',
'has_media' => 'setHasMedia',
'media_key' => 'setMediaKey',
'body' => 'setBody',
'type' => 'setType',
'timestamp' => 'setTimestamp',
'from' => 'setFrom',
'to' => 'setTo',
'is_forwarded' => 'setIsForwarded'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'ack' => 'getAck',
'has_media' => 'getHasMedia',
'media_key' => 'getMediaKey',
'body' => 'getBody',
'type' => 'getType',
'timestamp' => 'getTimestamp',
'from' => 'getFrom',
'to' => 'getTo',
'is_forwarded' => 'getIsForwarded'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ack'] = isset($data['ack']) ? $data['ack'] : null;
        $this->container['has_media'] = isset($data['has_media']) ? $data['has_media'] : null;
        $this->container['media_key'] = isset($data['media_key']) ? $data['media_key'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['is_forwarded'] = isset($data['is_forwarded']) ? $data['is_forwarded'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор сообщения
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ack
     *
     * @return int
     */
    public function getAck()
    {
        return $this->container['ack'];
    }

    /**
     * Sets ack
     *
     * @param int $ack Флаг просмотра сообщения
     *
     * @return $this
     */
    public function setAck($ack)
    {
        $this->container['ack'] = $ack;

        return $this;
    }

    /**
     * Gets has_media
     *
     * @return bool
     */
    public function getHasMedia()
    {
        return $this->container['has_media'];
    }

    /**
     * Sets has_media
     *
     * @param bool $has_media Флаг, имеет ли сообщение медиафайл
     *
     * @return $this
     */
    public function setHasMedia($has_media)
    {
        $this->container['has_media'] = $has_media;

        return $this;
    }

    /**
     * Gets media_key
     *
     * @return string
     */
    public function getMediaKey()
    {
        return $this->container['media_key'];
    }

    /**
     * Sets media_key
     *
     * @param string $media_key Ключ медиафайла (при наличии)
     *
     * @return $this
     */
    public function setMediaKey($media_key)
    {
        $this->container['media_key'] = $media_key;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body Текст сообщения
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Тип сообщения
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp Время сообщения в формате Unix Timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from Идентификатор отправителя в формате WhatsApp
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to Идентификатор получателя в формате WhatsApp
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets is_forwarded
     *
     * @return bool
     */
    public function getIsForwarded()
    {
        return $this->container['is_forwarded'];
    }

    /**
     * Sets is_forwarded
     *
     * @param bool $is_forwarded Флаг, было ли сообщение перенаправлено
     *
     * @return $this
     */
    public function setIsForwarded($is_forwarded)
    {
        $this->container['is_forwarded'] = $is_forwarded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
