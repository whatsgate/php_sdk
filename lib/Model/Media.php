<?php
/**
 * Media
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API whatsgate.ru
 *
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Media Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Media implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'media';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mimetype' => 'string',
'data' => 'string',
'filename' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mimetype' => null,
'data' => null,
'filename' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mimetype' => 'mimetype',
'data' => 'data',
'filename' => 'filename'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mimetype' => 'setMimetype',
'data' => 'setData',
'filename' => 'setFilename'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mimetype' => 'getMimetype',
'data' => 'getData',
'filename' => 'getFilename'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MIMETYPE_APPLICATIONOGG = 'application/ogg';
const MIMETYPE_APPLICATIONPDF = 'application/pdf';
const MIMETYPE_APPLICATIONZIP = 'application/zip';
const MIMETYPE_APPLICATIONGZIP = 'application/gzip';
const MIMETYPE_APPLICATIONMSWORD = 'application/msword';
const MIMETYPE_AUDIOMP4 = 'audio/mp4';
const MIMETYPE_AUDIOAAC = 'audio/aac';
const MIMETYPE_AUDIOMPEG = 'audio/mpeg';
const MIMETYPE_AUDIOOGG = 'audio/ogg';
const MIMETYPE_AUDIOWEBM = 'audio/webm';
const MIMETYPE_IMAGEGIF = 'image/gif';
const MIMETYPE_IMAGEJPEG = 'image/jpeg';
const MIMETYPE_IMAGEPJPEG = 'image/pjpeg';
const MIMETYPE_IMAGEPNG = 'image/png';
const MIMETYPE_IMAGESVGXML = 'image/svg+xml';
const MIMETYPE_IMAGETIFF = 'image/tiff';
const MIMETYPE_IMAGEWEBP = 'image/webp';
const MIMETYPE_VIDEOMPEG = 'video/mpeg';
const MIMETYPE_VIDEOMP4 = 'video/mp4';
const MIMETYPE_VIDEOOGG = 'video/ogg';
const MIMETYPE_VIDEOQUICKTIME = 'video/quicktime';
const MIMETYPE_VIDEOWEBM = 'video/webm';
const MIMETYPE_VIDEOX_MS_WMV = 'video/x-ms-wmv';
const MIMETYPE_VIDEOX_FLV = 'video/x-flv';
const MIMETYPE_APPLICATIONVNDMS_EXCEL = 'application/vnd.ms-excel';
const MIMETYPE_APPLICATIONVNDMS_POWERPOINT = 'application/vnd.ms-powerpoint';
const MIMETYPE_APPLICATIONMSWORD_26 = 'application/msword';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMimetypeAllowableValues()
    {
        return [
            self::MIMETYPE_APPLICATIONOGG,
self::MIMETYPE_APPLICATIONPDF,
self::MIMETYPE_APPLICATIONZIP,
self::MIMETYPE_APPLICATIONGZIP,
self::MIMETYPE_APPLICATIONMSWORD,
self::MIMETYPE_AUDIOMP4,
self::MIMETYPE_AUDIOAAC,
self::MIMETYPE_AUDIOMPEG,
self::MIMETYPE_AUDIOOGG,
self::MIMETYPE_AUDIOWEBM,
self::MIMETYPE_IMAGEGIF,
self::MIMETYPE_IMAGEJPEG,
self::MIMETYPE_IMAGEPJPEG,
self::MIMETYPE_IMAGEPNG,
self::MIMETYPE_IMAGESVGXML,
self::MIMETYPE_IMAGETIFF,
self::MIMETYPE_IMAGEWEBP,
self::MIMETYPE_VIDEOMPEG,
self::MIMETYPE_VIDEOMP4,
self::MIMETYPE_VIDEOOGG,
self::MIMETYPE_VIDEOQUICKTIME,
self::MIMETYPE_VIDEOWEBM,
self::MIMETYPE_VIDEOX_MS_WMV,
self::MIMETYPE_VIDEOX_FLV,
self::MIMETYPE_APPLICATIONVNDMS_EXCEL,
self::MIMETYPE_APPLICATIONVNDMS_POWERPOINT,
self::MIMETYPE_APPLICATIONMSWORD_26,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mimetype'] = isset($data['mimetype']) ? $data['mimetype'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mimetype'] === null) {
            $invalidProperties[] = "'mimetype' can't be null";
        }
        $allowedValues = $this->getMimetypeAllowableValues();
        if (!is_null($this->container['mimetype']) && !in_array($this->container['mimetype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mimetype', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['filename'] === null) {
            $invalidProperties[] = "'filename' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mimetype
     *
     * @return string
     */
    public function getMimetype()
    {
        return $this->container['mimetype'];
    }

    /**
     * Sets mimetype
     *
     * @param string $mimetype Mime type of file
     *
     * @return $this
     */
    public function setMimetype($mimetype)
    {
        $allowedValues = $this->getMimetypeAllowableValues();
        if (!in_array($mimetype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mimetype', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mimetype'] = $mimetype;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data Base64 encoded data file body
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename Name of the file
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
