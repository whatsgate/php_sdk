<?php
/**
 * ResponseChat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API whatsgate.ru
 *
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseChat Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseChat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseChat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'is_group' => 'bool',
'is_read_only' => 'bool',
'unread_count' => 'int',
'timestamp' => 'int',
'pinned' => 'bool',
'is_muted' => 'bool',
'mute_expiration' => 'bool',
'group_metadata' => '\Swagger\Client\Model\ResponseChatGroupMetadata'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'is_group' => null,
'is_read_only' => null,
'unread_count' => null,
'timestamp' => null,
'pinned' => null,
'is_muted' => null,
'mute_expiration' => null,
'group_metadata' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'is_group' => 'isGroup',
'is_read_only' => 'isReadOnly',
'unread_count' => 'unreadCount',
'timestamp' => 'timestamp',
'pinned' => 'pinned',
'is_muted' => 'isMuted',
'mute_expiration' => 'muteExpiration',
'group_metadata' => 'groupMetadata'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'is_group' => 'setIsGroup',
'is_read_only' => 'setIsReadOnly',
'unread_count' => 'setUnreadCount',
'timestamp' => 'setTimestamp',
'pinned' => 'setPinned',
'is_muted' => 'setIsMuted',
'mute_expiration' => 'setMuteExpiration',
'group_metadata' => 'setGroupMetadata'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'is_group' => 'getIsGroup',
'is_read_only' => 'getIsReadOnly',
'unread_count' => 'getUnreadCount',
'timestamp' => 'getTimestamp',
'pinned' => 'getPinned',
'is_muted' => 'getIsMuted',
'mute_expiration' => 'getMuteExpiration',
'group_metadata' => 'getGroupMetadata'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['is_group'] = isset($data['is_group']) ? $data['is_group'] : null;
        $this->container['is_read_only'] = isset($data['is_read_only']) ? $data['is_read_only'] : null;
        $this->container['unread_count'] = isset($data['unread_count']) ? $data['unread_count'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['pinned'] = isset($data['pinned']) ? $data['pinned'] : null;
        $this->container['is_muted'] = isset($data['is_muted']) ? $data['is_muted'] : null;
        $this->container['mute_expiration'] = isset($data['mute_expiration']) ? $data['mute_expiration'] : null;
        $this->container['group_metadata'] = isset($data['group_metadata']) ? $data['group_metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор контакта или группы в формате WhatsApp
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Имя контакта или группы
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_group
     *
     * @return bool
     */
    public function getIsGroup()
    {
        return $this->container['is_group'];
    }

    /**
     * Sets is_group
     *
     * @param bool $is_group Является ли чат контактом или группой
     *
     * @return $this
     */
    public function setIsGroup($is_group)
    {
        $this->container['is_group'] = $is_group;

        return $this;
    }

    /**
     * Gets is_read_only
     *
     * @return bool
     */
    public function getIsReadOnly()
    {
        return $this->container['is_read_only'];
    }

    /**
     * Sets is_read_only
     *
     * @param bool $is_read_only Является ли чат ReadOnly
     *
     * @return $this
     */
    public function setIsReadOnly($is_read_only)
    {
        $this->container['is_read_only'] = $is_read_only;

        return $this;
    }

    /**
     * Gets unread_count
     *
     * @return int
     */
    public function getUnreadCount()
    {
        return $this->container['unread_count'];
    }

    /**
     * Sets unread_count
     *
     * @param int $unread_count Количество непрочитанных сообщений в чате
     *
     * @return $this
     */
    public function setUnreadCount($unread_count)
    {
        $this->container['unread_count'] = $unread_count;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp Время последней активночти в чате
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets pinned
     *
     * @return bool
     */
    public function getPinned()
    {
        return $this->container['pinned'];
    }

    /**
     * Sets pinned
     *
     * @param bool $pinned Является ли чат закрепленным
     *
     * @return $this
     */
    public function setPinned($pinned)
    {
        $this->container['pinned'] = $pinned;

        return $this;
    }

    /**
     * Gets is_muted
     *
     * @return bool
     */
    public function getIsMuted()
    {
        return $this->container['is_muted'];
    }

    /**
     * Sets is_muted
     *
     * @param bool $is_muted Выключен ли у чата звук
     *
     * @return $this
     */
    public function setIsMuted($is_muted)
    {
        $this->container['is_muted'] = $is_muted;

        return $this;
    }

    /**
     * Gets mute_expiration
     *
     * @return bool
     */
    public function getMuteExpiration()
    {
        return $this->container['mute_expiration'];
    }

    /**
     * Sets mute_expiration
     *
     * @param bool $mute_expiration Время, оставшееся до включения звука
     *
     * @return $this
     */
    public function setMuteExpiration($mute_expiration)
    {
        $this->container['mute_expiration'] = $mute_expiration;

        return $this;
    }

    /**
     * Gets group_metadata
     *
     * @return \Swagger\Client\Model\ResponseChatGroupMetadata
     */
    public function getGroupMetadata()
    {
        return $this->container['group_metadata'];
    }

    /**
     * Sets group_metadata
     *
     * @param \Swagger\Client\Model\ResponseChatGroupMetadata $group_metadata group_metadata
     *
     * @return $this
     */
    public function setGroupMetadata($group_metadata)
    {
        $this->container['group_metadata'] = $group_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
